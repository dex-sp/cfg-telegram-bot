package telegram

import (
	"fmt"

	"github.com/dex-sp/cfg-telegram-bot/pkg/repository"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (

	// Bot commands

	cmdStart = "start"

	// Bot queries

	registrationQuery = "registration"
	cancelQuery       = "cancel"
	locationQuery     = "location"
	scheduleQuery     = "schedule"
	priceQuery        = "price"
	cmdPay            = "pay"
	orderQuery        = "order"
	callQuery         = "call"

	anotherDayQuery  = "another"
	changePhoneQuery = "change"
)

func (b *Bot) handleCommands(message *tgbotapi.Message) error {

	switch message.Command() {

	case cmdStart:
		return b.handleStartCommand(message)

	default:
		return b.handleUnknownCommand(message)

	}
}

func (b *Bot) handleQueries(query *tgbotapi.CallbackQuery) error {

	switch query.Data {

	case registrationQuery:
		return b.handleRegistrationQuery(query)

	case cancelQuery:
		return b.handleCancelQuery(query)

	case locationQuery:
		return b.handleLocationQuery(query)

	case scheduleQuery:
		return b.handleScheduleQuery(query)

	case priceQuery:
		return b.handlePriceQuery(query)

	case orderQuery:
		return b.handleOrderQuery(query)

	case callQuery:
		return b.handleCallQuery(query)

	case anotherDayQuery:

	case changePhoneQuery:
		return b.handleChangePhoneQuery(query)

	default:

	}

	return nil
}

func (b *Bot) handleMessage(message *tgbotapi.Message) error {

	if containsUserPhone(message) {
		return b.handlePhoneData(message)

	}
	return nil
}

func (b *Bot) handleStartCommand(message *tgbotapi.Message) error {

	msg := tgbotapi.NewMessage(message.Chat.ID,
		"–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø—É *–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ*, "+
			"–∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = startMenu

	_, err := b.bot.Send(msg)
	return err
}

func (b *Bot) handleUnknownCommand(message *tgbotapi.Message) error {

	msg := tgbotapi.NewMessage(message.Chat.ID,
		"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã üòî")
	_, err := b.bot.Send(msg)
	return err
}

func (b *Bot) handleRegistrationQuery(query *tgbotapi.CallbackQuery) error {

	msg := tgbotapi.NewMessage(query.From.ID,
		"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

	if query.From.FirstName != "" {
		msg.Text = fmt.Sprintf("%s, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
			query.From.FirstName)
	}

	_, err := b.bot.Send(msg)
	return err
}

func (b *Bot) handleCancelQuery(query *tgbotapi.CallbackQuery) error {

	msg := tgbotapi.NewMessage(query.From.ID,
		"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞. –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å! üòâ")

	if query.From.FirstName != "" {
		msg.Text = fmt.Sprintf("–û–∫–µ–π, %s, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞. "+
			"–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å! üòâ",
			query.From.FirstName)
	}

	_, err := b.bot.Send(msg)
	return err
}

func (b *Bot) handleLocationQuery(query *tgbotapi.CallbackQuery) error {

	msg := tgbotapi.NewMessage(query.From.ID,
		"TODO: –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –ª–æ–∫–∞—Ü–∏–∏")

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(registrationButton),
		tgbotapi.NewInlineKeyboardRow(chartButton))

	_, err := b.bot.Send(msg)
	return err
}

func (b *Bot) handlePriceQuery(query *tgbotapi.CallbackQuery) error {

	msg := tgbotapi.NewMessage(query.From.ID,
		"300—Ä. - —Å—ã–≥—Ä–∞—Ç—å –æ–¥–Ω—É –∏–≥—Ä—É, –ø—Ä–∏–º–µ—Ä–Ω–æ 40 –º–∏–Ω—É—Ç\n"+
			"600—Ä. - —Å 19:00 –¥–æ 24:00\n"+
			"800—Ä. - —Å 19:00 –¥–æ 03:00\n\n"+
			"–°—Ä–µ–¥–∞")

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(registrationButton))

	_, err := b.bot.Send(msg)
	return err
}

func (b *Bot) handleScheduleQuery(query *tgbotapi.CallbackQuery) error {

	msg := tgbotapi.NewMessage(query.From.ID,
		"–°—Ä–µ–¥–∞ —Å 19:00 –¥–æ 24:00\n"+
			"–ü—è—Ç–Ω–∏—Ü–∞ —Å 19:00 –¥–æ 03:00\n"+
			"–°—É–±–±–æ—Ç–∞ —Å 16:30 –¥–æ 06:00")

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(registrationButton),
		tgbotapi.NewInlineKeyboardRow(anotherDayButton))

	_, err := b.bot.Send(msg)
	return err
}

func (b *Bot) handleOrderQuery(query *tgbotapi.CallbackQuery) error {

	msg := tgbotapi.NewMessage(query.From.ID,
		"–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "+
			"–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –≤—ã –æ–±—Å—É–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è.\n\n"+
			"–°—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å–∞ –≤–µ–¥—É—â–µ–≥–æ –æ—Ç 2800—Ä.")

	if query.From.FirstName != "" {
		msg.Text = fmt.Sprintf("%s, –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "+
			"–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –≤—ã –æ–±—Å—É–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è.\n\n"+
			"–°—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å–∞ –≤–µ–¥—É—â–µ–≥–æ –æ—Ç 2800—Ä.",
			query.From.FirstName)
	}

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(getPhoneButton))

	_, err := b.bot.Send(msg)
	return err
}

func (b *Bot) handleCallQuery(query *tgbotapi.CallbackQuery) error {

	currentPhone, err := b.userDataRepository.Get(query.From.ID, repository.Phones)
	if err != nil {
		return err
	}

	msg := tgbotapi.NewMessage(query.From.ID, fmt.Sprintf(
		"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!‚òéÔ∏è\n"+
			"–ï—Å–ª–∏ —É –≤–∞—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–æ–º–µ—Ä –Ω–∞–∂–º–∏—Ç–µ *%s*.", changePhoneButton.Text))
	msg.ParseMode = "Markdown"

	if currentPhone == "" {
		msg.Text = "–ï—Å–ª–∏ –≤—ã —É–∫–∞–∂–µ—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç " +
			"–Ω–∞–º –ø—Ä–æ—â–µ –∏ –±—ã—Å—Ç—Ä–µ–µ —Ä–µ—à–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.üöÄ"
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(getPhoneButton))

	} else {
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(changePhoneButton))
	}

	_, err = b.bot.Send(msg)
	return err
}

func (b *Bot) handleChangePhoneQuery(query *tgbotapi.CallbackQuery) error {

	msg := tgbotapi.NewMessage(query.From.ID,
		"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã —Å–º–æ–∂–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.üÜïüî•")

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(getPhoneButton))

	_, err := b.bot.Send(msg)
	return err
}

func (b *Bot) handlePhoneData(message *tgbotapi.Message) error {

	currentPhone, err := b.userDataRepository.Get(message.Contact.UserID, repository.Phones)
	if err != nil {
		return err
	}

	if currentPhone != message.Contact.PhoneNumber {
		err := b.userDataRepository.Save(
			message.Contact.UserID,
			message.Contact.PhoneNumber,
			repository.Phones)
		if err != nil {
			return err
		}
	}
	return b.deleteReplyMenu(message)
}
